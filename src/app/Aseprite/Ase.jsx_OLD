import React, { useRef, useState, useEffect } from 'react';
import AseReader from './AseReader';
import Palette from './Palette';
import './Ase.css';

const Ase = (props) => {
  const [info, setInfo] = useState({});
  const [frame, setFrame] = useState(null);
  const canvas = useRef(null);
  const inMemCanvas = useRef(null);
  const loadAse = async file => {
    const fr = new FileReader();
    fr.onload = async e => {
      const ase = new AseReader(e.target.result, props.name);
      ase.parse();
      const ctx = canvas.current.getContext("2d");
      ctx.canvas.width = ase.width;
      ctx.canvas.height = ase.height;
      setInfo(ase);
      setFrame(0);
    };
    fr.readAsArrayBuffer(file);
  };
  // Effect on load
  useEffect(() => {
   loadAse(props.file);
  }, [props.file]);

  const writeCel = (numCel) => {
    const cel = info.frames[frame].cels[numCel];
    const ctx = canvas.current.getContext('2d');
    const inMemContext = inMemCanvas.current.getContext('2d');
    inMemContext.width = info.width;
    inMemContext.height = info.height;
    let imageData = inMemContext.createImageData(cel.w, cel.h);
    for (let i = 0; i < cel.rawCelData.byteLength; i++) {
      imageData.data[i] = cel.rawCelData[i];
    }
    inMemContext.putImageData(imageData, cel.xpos, cel.ypos);
    ctx.drawImage(inMemCanvas.current, 0,0);
  }

  useEffect(() => {
    if(info.name !== undefined) {
      clearCanvas();
      clearInMemCanvas();
      handleFrameChange();
    }
  }, [frame])

  const handleFrameChange = () => {
    console.log('here');
    const celLen = info.frames[frame].cels.length;
    for(let i = 0; i < celLen; i ++) {
      writeCel(i);
    }
  }

  const formatBytes = (bytes, decimals) => {
    if (bytes === 0) {
      return "0 Byte";
    }
    const k = 1024;
    const dm = decimals + 1 || 3;
    const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
  };

  const clearCanvas = () => {
    const ctx = canvas.current.getContext('2d');
    ctx.clearRect(0, 0, info.width, info.height);
  }

  const clearInMemCanvas = () => {
    const inMemContext = inMemCanvas.current.getContext('2d');
    inMemContext.clearRect(0, 0, info.width, info.height);
  }

  const handleClick = (numFrame) => {
    setFrame(numFrame);
  }

  let palette;
  if (info.name !== undefined) {
    palette = <Palette colors={info.palette.colors} />
  }

  return (
    <div className="ase-preview-container">
      {info.name !== undefined ? <span className='ase-preview-file-info'>{`${info.name} ${formatBytes(info.fileSize)}`}</span>: ''}
      <canvas ref={inMemCanvas} style={{display: 'none'}}/>
      <div className="ase-preview-image">
        <div className="ase-palette-container">
          {palette}
        </div>
        <div className="ase-preview-image-view">
          <canvas className=""
            ref={canvas}
            />
        </div>
        
      </div>
      <div className="ase-preview-timeline">
        <div className="ase-preview-frames">
          {info.name !== undefined ? info.frames.map((f, ind) => <div key={`frame_${ind}`} className={`ase-preview-frame ${ind === frame ? 'active' : ''}`} onClick={() => handleClick(ind)}>{`${ind+1}`}</div>) : ''}
        </div>
      </div>
    </div>
  );
}

export default Ase;